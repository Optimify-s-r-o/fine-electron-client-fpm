/* tslint:disable */
/* eslint-disable */
/**
 * Fine Project Manager API 1.0
 * REST API for Fine Project Manager. Developed by Optimify s.r.o.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Model for changing password
 * @export
 * @interface AdminChangePasswordRequest
 */
export interface AdminChangePasswordRequest {
    /**
     * User email
     * @type {string}
     * @memberof AdminChangePasswordRequest
     */
    'userEmail': string;
    /**
     * New user password
     * @type {string}
     * @memberof AdminChangePasswordRequest
     */
    'newPassword': string;
}
/**
 * Model for editing public user information
 * @export
 * @interface AdminEditUserRequest
 */
export interface AdminEditUserRequest {
    /**
     * Old email, used for user identification
     * @type {string}
     * @memberof AdminEditUserRequest
     */
    'oldEmail': string;
    /**
     * New email, can remain the same
     * @type {string}
     * @memberof AdminEditUserRequest
     */
    'newEmail': string;
    /**
     * Phone number
     * @type {string}
     * @memberof AdminEditUserRequest
     */
    'phoneNumber': string;
    /**
     * List of roles
     * @type {Array<string>}
     * @memberof AdminEditUserRequest
     */
    'roles': Array<string>;
}
/**
 * Request for creating new application
 * @export
 * @interface ApplicationCreateRequest
 */
export interface ApplicationCreateRequest {
    /**
     * Name of the application
     * @type {string}
     * @memberof ApplicationCreateRequest
     */
    'name': string;
    /**
     * Internal code of the application
     * @type {string}
     * @memberof ApplicationCreateRequest
     */
    'code': string;
}
/**
 * Public application model
 * @export
 * @interface ApplicationDto
 */
export interface ApplicationDto {
    /**
     * Entity id
     * @type {string}
     * @memberof ApplicationDto
     */
    'id': string;
    /**
     * When was entity created
     * @type {string}
     * @memberof ApplicationDto
     */
    'createdAt': string;
    /**
     * Whem was entity modified
     * @type {string}
     * @memberof ApplicationDto
     */
    'updatedAt': string;
    /**
     * Name of application
     * @type {string}
     * @memberof ApplicationDto
     */
    'name': string;
    /**
     * Code of application
     * @type {string}
     * @memberof ApplicationDto
     */
    'code': string;
    /**
     * Url to icon.  Null if icon not exists.
     * @type {string}
     * @memberof ApplicationDto
     */
    'icon'?: string | null;
    /**
     * Application icon suffix to determine correct format
     * @type {string}
     * @memberof ApplicationDto
     */
    'applicationIconSuffix'?: string | null;
}
/**
 * Standard class used for paginated results
 * @export
 * @interface ApplicationDtoPaginatedCollection
 */
export interface ApplicationDtoPaginatedCollection {
    /**
     * Data in collection
     * @type {Array<ApplicationDto>}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'data': Array<ApplicationDto>;
    /**
     * Page number of result
     * @type {number}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'page': number;
    /**
     * True page size
     * @type {number}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'pageSize': number;
    /**
     * Requested page size
     * @type {number}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'requestedPageSize': number;
    /**
     * Total records that exist
     * @type {number}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'totalRecords': number;
    /**
     * Total number of pages that exist
     * @type {number}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'totalPages': number;
    /**
     * Filter used by client
     * @type {string}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'filter': string;
    /**
     * Sort used by client
     * @type {string}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'sort': string;
    /**
     * Determine whether next page exists
     * @type {boolean}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'nextPageExists': boolean;
    /**
     * Determine whether previous page exists
     * @type {boolean}
     * @memberof ApplicationDtoPaginatedCollection
     */
    'previousPageExists': boolean;
}
/**
 * Request for application update.  Icon update is separate request.
 * @export
 * @interface ApplicationUpdateRequest
 */
export interface ApplicationUpdateRequest {
    /**
     * Entity id
     * @type {string}
     * @memberof ApplicationUpdateRequest
     */
    'id': string;
    /**
     * Name of the application
     * @type {string}
     * @memberof ApplicationUpdateRequest
     */
    'name': string;
    /**
     * Internal code of the application
     * @type {string}
     * @memberof ApplicationUpdateRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ClientErrorData
 */
export interface ClientErrorData {
    /**
     * 
     * @type {string}
     * @memberof ClientErrorData
     */
    'link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientErrorData
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface ClientExceptionPublicModel
 */
export interface ClientExceptionPublicModel {
    /**
     * 
     * @type {string}
     * @memberof ClientExceptionPublicModel
     */
    'identifier'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientExceptionPublicModel
     */
    'genericMessage'?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ClientExceptionPublicModel
     */
    'values'?: { [key: string]: string; } | null;
    /**
     * 
     * @type {string}
     * @memberof ClientExceptionPublicModel
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientExceptionPublicModel
     */
    'fullMessage'?: string | null;
}
/**
 * Model for user disable
 * @export
 * @interface DisableUserRequest
 */
export interface DisableUserRequest {
    /**
     * Email of user to disable
     * @type {string}
     * @memberof DisableUserRequest
     */
    'email': string;
}
/**
 * Request for editing user
 * @export
 * @interface EditUserRequest
 */
export interface EditUserRequest {
    /**
     * New email, can remain the same
     * @type {string}
     * @memberof EditUserRequest
     */
    'email': string;
    /**
     * Phone number
     * @type {string}
     * @memberof EditUserRequest
     */
    'phoneNumber': string;
}
/**
 * Model that includes lins to files saved under specified entity
 * @export
 * @interface FileLinksResponse
 */
export interface FileLinksResponse {
    /**
     * Entity id
     * @type {string}
     * @memberof FileLinksResponse
     */
    'id'?: string;
    /**
     * Name (or other key) of given entity
     * @type {string}
     * @memberof FileLinksResponse
     */
    'name'?: string | null;
    /**
     * Folder key
     * @type {string}
     * @memberof FileLinksResponse
     */
    'folder'?: string | null;
    /**
     * Files saved under specified entity
     * @type {Array<FileOperationResponse>}
     * @memberof FileLinksResponse
     */
    'files'?: Array<FileOperationResponse> | null;
}
/**
 * Response to request for presigned url
 * @export
 * @interface FileOperationResponse
 */
export interface FileOperationResponse {
    /**
     * Link for file operations
     * @type {string}
     * @memberof FileOperationResponse
     */
    'link': string;
    /**
     * Key to specified file
     * @type {string}
     * @memberof FileOperationResponse
     */
    'key': string;
    /**
     * Validity of link
     * @type {string}
     * @memberof FileOperationResponse
     */
    'validUntil': string;
    /**
     * Size of file
     * @type {number}
     * @memberof FileOperationResponse
     */
    'size': number;
    /**
     * Extension
     * @type {string}
     * @memberof FileOperationResponse
     */
    'extension': string;
    /**
     * Full file path
     * @type {string}
     * @memberof FileOperationResponse
     */
    'fullPath': string;
    /**
     * Full file name
     * @type {string}
     * @memberof FileOperationResponse
     */
    'fullName': string;
    /**
     * Content disposition header
     * @type {string}
     * @memberof FileOperationResponse
     */
    'contentDisposition': string;
    /**
     * Content type
     * @type {string}
     * @memberof FileOperationResponse
     */
    'contentType': string;
    /**
     * Date of last modifivation
     * @type {string}
     * @memberof FileOperationResponse
     */
    'lastModification': string;
}
/**
 * Job attribute public model
 * @export
 * @interface JobAttributeDto
 */
export interface JobAttributeDto {
    /**
     * Name of the job attribute in language it was created
     * @type {string}
     * @memberof JobAttributeDto
     */
    'name'?: string | null;
    /**
     * Normalized name that should be translated.  If not specified, \'name\' is used instead
     * @type {string}
     * @memberof JobAttributeDto
     */
    'normalizedName'?: string | null;
    /**
     * Value of attribute, based on type
     * @type {string}
     * @memberof JobAttributeDto
     */
    'value'?: string | null;
    /**
     * 
     * @type {JobAttributeValueType}
     * @memberof JobAttributeDto
     */
    'type'?: JobAttributeValueType;
    /**
     * Unit of the attribute
     * @type {string}
     * @memberof JobAttributeDto
     */
    'unit'?: string | null;
    /**
     * How many decimals should be showned
     * @type {number}
     * @memberof JobAttributeDto
     */
    'decimalsToShow'?: number | null;
}
/**
 * Public model
 * @export
 * @interface JobAttributeTranslationDto
 */
export interface JobAttributeTranslationDto {
    /**
     * Act like primary key
     * @type {string}
     * @memberof JobAttributeTranslationDto
     */
    'normalizedName'?: string | null;
    /**
     * Translation value
     * @type {string}
     * @memberof JobAttributeTranslationDto
     */
    'translation'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const JobAttributeValueType = {
    String: 'String',
    Number: 'Number'
} as const;

export type JobAttributeValueType = typeof JobAttributeValueType[keyof typeof JobAttributeValueType];


/**
 * Create job entity
 * @export
 * @interface JobCreateRequest
 */
export interface JobCreateRequest {
    /**
     * Id of job type.  Can be null
     * @type {string}
     * @memberof JobCreateRequest
     */
    'type'?: string | null;
    /**
     * Name of job
     * @type {string}
     * @memberof JobCreateRequest
     */
    'name': string;
    /**
     * Description of job
     * @type {string}
     * @memberof JobCreateRequest
     */
    'description'?: string | null;
    /**
     * Project id attribute
     * @type {string}
     * @memberof JobCreateRequest
     */
    'projectId': string;
    /**
     * String represeting application associated with this job.  Null means this job cannot be opened
     * @type {string}
     * @memberof JobCreateRequest
     */
    'application'?: string | null;
    /**
     * Extension of file in case job is openable  If job is not openable in any programm, value is null
     * @type {string}
     * @memberof JobCreateRequest
     */
    'applicationFileExtension'?: string | null;
    /**
     * Attributes of job
     * @type {Array<JobAttributeDto>}
     * @memberof JobCreateRequest
     */
    'attributes'?: Array<JobAttributeDto> | null;
}
/**
 * Job public model
 * @export
 * @interface JobDto
 */
export interface JobDto {
    /**
     * Created by attribute
     * @type {string}
     * @memberof JobDto
     */
    'createdBy': string;
    /**
     * Updated by attribute
     * @type {string}
     * @memberof JobDto
     */
    'updatedBy': string;
    /**
     * Entity id
     * @type {string}
     * @memberof JobDto
     */
    'id': string;
    /**
     * Created at attribute
     * @type {string}
     * @memberof JobDto
     */
    'createdAt': string;
    /**
     * Updated by attribute
     * @type {string}
     * @memberof JobDto
     */
    'updatedAt': string;
    /**
     * Id of job type
     * @type {string}
     * @memberof JobDto
     */
    'type'?: string | null;
    /**
     * Name of job
     * @type {string}
     * @memberof JobDto
     */
    'name': string;
    /**
     * Description of job
     * @type {string}
     * @memberof JobDto
     */
    'description'?: string | null;
    /**
     * Project id attribute
     * @type {string}
     * @memberof JobDto
     */
    'projectId': string;
    /**
     * String represeting application associated with this job.  Null means this job cannot be opened
     * @type {string}
     * @memberof JobDto
     */
    'application'?: string | null;
    /**
     * Show if this job can be opened in any application
     * @type {boolean}
     * @memberof JobDto
     */
    'isOpenable'?: boolean;
    /**
     * Extension of file in case job is openable  If job is not openable in any programm, value is null
     * @type {string}
     * @memberof JobDto
     */
    'applicationFileExtension'?: string | null;
    /**
     * Attributes of job
     * @type {Array<JobAttributeDto>}
     * @memberof JobDto
     */
    'attributes'?: Array<JobAttributeDto> | null;
}
/**
 * Standard class used for paginated results
 * @export
 * @interface JobDtoPaginatedCollection
 */
export interface JobDtoPaginatedCollection {
    /**
     * Data in collection
     * @type {Array<JobDto>}
     * @memberof JobDtoPaginatedCollection
     */
    'data': Array<JobDto>;
    /**
     * Page number of result
     * @type {number}
     * @memberof JobDtoPaginatedCollection
     */
    'page': number;
    /**
     * True page size
     * @type {number}
     * @memberof JobDtoPaginatedCollection
     */
    'pageSize': number;
    /**
     * Requested page size
     * @type {number}
     * @memberof JobDtoPaginatedCollection
     */
    'requestedPageSize': number;
    /**
     * Total records that exist
     * @type {number}
     * @memberof JobDtoPaginatedCollection
     */
    'totalRecords': number;
    /**
     * Total number of pages that exist
     * @type {number}
     * @memberof JobDtoPaginatedCollection
     */
    'totalPages': number;
    /**
     * Filter used by client
     * @type {string}
     * @memberof JobDtoPaginatedCollection
     */
    'filter': string;
    /**
     * Sort used by client
     * @type {string}
     * @memberof JobDtoPaginatedCollection
     */
    'sort': string;
    /**
     * Determine whether next page exists
     * @type {boolean}
     * @memberof JobDtoPaginatedCollection
     */
    'nextPageExists': boolean;
    /**
     * Determine whether previous page exists
     * @type {boolean}
     * @memberof JobDtoPaginatedCollection
     */
    'previousPageExists': boolean;
}
/**
 * Quick review of project-job state
 * @export
 * @interface JobResultInformationDto
 */
export interface JobResultInformationDto {
    /**
     * Number of openable jobs
     * @type {number}
     * @memberof JobResultInformationDto
     */
    'openableCount': number;
    /**
     * Number of jobs under project
     * @type {{ [key: string]: number; }}
     * @memberof JobResultInformationDto
     */
    'otherJobs': { [key: string]: number; };
}
/**
 * Request for creating new translation
 * @export
 * @interface JobTranslationCreateRequest
 */
export interface JobTranslationCreateRequest {
    /**
     * Internal identified for job type
     * @type {string}
     * @memberof JobTranslationCreateRequest
     */
    'type'?: string;
    /**
     * Translation string for name
     * @type {string}
     * @memberof JobTranslationCreateRequest
     */
    'translation'?: string | null;
    /**
     * Internal identified for language
     * @type {string}
     * @memberof JobTranslationCreateRequest
     */
    'language'?: string | null;
    /**
     * Attributes to translate
     * @type {Array<JobAttributeTranslationDto>}
     * @memberof JobTranslationCreateRequest
     */
    'attributes'?: Array<JobAttributeTranslationDto> | null;
}
/**
 * Public model
 * @export
 * @interface JobTranslationDto
 */
export interface JobTranslationDto {
    /**
     * Owner id
     * @type {string}
     * @memberof JobTranslationDto
     */
    'createdBy'?: string;
    /**
     * Owner of last edit id
     * @type {string}
     * @memberof JobTranslationDto
     */
    'updatedBy'?: string;
    /**
     * Entity id
     * @type {string}
     * @memberof JobTranslationDto
     */
    'id'?: string;
    /**
     * Date of creation
     * @type {string}
     * @memberof JobTranslationDto
     */
    'createdAt'?: string;
    /**
     * Date of last update
     * @type {string}
     * @memberof JobTranslationDto
     */
    'updatedAt'?: string;
    /**
     * Type of job, act like primary key, should be unique across the world
     * @type {string}
     * @memberof JobTranslationDto
     */
    'type'?: string;
    /**
     * Translation of name of this job
     * @type {string}
     * @memberof JobTranslationDto
     */
    'translation'?: string | null;
    /**
     * Language that this translation is part of (should be something like \'en-US\')
     * @type {string}
     * @memberof JobTranslationDto
     */
    'language'?: string | null;
    /**
     * Suffix of icon
     * @type {string}
     * @memberof JobTranslationDto
     */
    'jobTranslationIconSuffix'?: string | null;
    /**
     * Icon public link
     * @type {string}
     * @memberof JobTranslationDto
     */
    'icon'?: string | null;
    /**
     * Translations of all attributes
     * @type {Array<JobAttributeTranslationDto>}
     * @memberof JobTranslationDto
     */
    'attributes'?: Array<JobAttributeTranslationDto> | null;
}
/**
 * Standard class used for paginated results
 * @export
 * @interface JobTranslationDtoPaginatedCollection
 */
export interface JobTranslationDtoPaginatedCollection {
    /**
     * Data in collection
     * @type {Array<JobTranslationDto>}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'data': Array<JobTranslationDto>;
    /**
     * Page number of result
     * @type {number}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'page': number;
    /**
     * True page size
     * @type {number}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'pageSize': number;
    /**
     * Requested page size
     * @type {number}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'requestedPageSize': number;
    /**
     * Total records that exist
     * @type {number}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'totalRecords': number;
    /**
     * Total number of pages that exist
     * @type {number}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'totalPages': number;
    /**
     * Filter used by client
     * @type {string}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'filter': string;
    /**
     * Sort used by client
     * @type {string}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'sort': string;
    /**
     * Determine whether next page exists
     * @type {boolean}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'nextPageExists': boolean;
    /**
     * Determine whether previous page exists
     * @type {boolean}
     * @memberof JobTranslationDtoPaginatedCollection
     */
    'previousPageExists': boolean;
}
/**
 * Request for application update.  Icon update is separate request.
 * @export
 * @interface JobTranslationUpdateRequest
 */
export interface JobTranslationUpdateRequest {
    /**
     * Entity id
     * @type {string}
     * @memberof JobTranslationUpdateRequest
     */
    'id': string;
    /**
     * Internal identified for job type
     * @type {string}
     * @memberof JobTranslationUpdateRequest
     */
    'type': string;
    /**
     * Translation string for name
     * @type {string}
     * @memberof JobTranslationUpdateRequest
     */
    'translation': string;
    /**
     * Internal identified for language
     * @type {string}
     * @memberof JobTranslationUpdateRequest
     */
    'language': string;
    /**
     * Attributes to translate
     * @type {Array<JobAttributeTranslationDto>}
     * @memberof JobTranslationUpdateRequest
     */
    'attributes'?: Array<JobAttributeTranslationDto> | null;
}
/**
 * Update job data
 * @export
 * @interface JobUpdateRequest
 */
export interface JobUpdateRequest {
    /**
     * Entity id
     * @type {string}
     * @memberof JobUpdateRequest
     */
    'id'?: string;
    /**
     * Id of job type.  Can be null
     * @type {string}
     * @memberof JobUpdateRequest
     */
    'type'?: string | null;
    /**
     * Name of job
     * @type {string}
     * @memberof JobUpdateRequest
     */
    'name': string;
    /**
     * Description of job
     * @type {string}
     * @memberof JobUpdateRequest
     */
    'description'?: string | null;
    /**
     * Extension of file in case job is openable  If job is not openable in any programm, value is null
     * @type {string}
     * @memberof JobUpdateRequest
     */
    'applicationFileExtension'?: string | null;
    /**
     * Project id attribute
     * @type {string}
     * @memberof JobUpdateRequest
     */
    'projectId': string;
    /**
     * String represeting application associated with this job.  Null means this job cannot be opened
     * @type {string}
     * @memberof JobUpdateRequest
     */
    'application'?: string | null;
    /**
     * Attributes of job
     * @type {Array<JobAttributeDto>}
     * @memberof JobUpdateRequest
     */
    'attributes': Array<JobAttributeDto>;
}
/**
 * Create new project
 * @export
 * @interface ProjectCreateRequest
 */
export interface ProjectCreateRequest {
    /**
     * Name of project
     * @type {string}
     * @memberof ProjectCreateRequest
     */
    'name': string;
    /**
     * Description of project
     * @type {string}
     * @memberof ProjectCreateRequest
     */
    'description'?: string | null;
}
/**
 * Project public model
 * @export
 * @interface ProjectDto
 */
export interface ProjectDto {
    /**
     * Entity id
     * @type {string}
     * @memberof ProjectDto
     */
    'id': string;
    /**
     * Owner id
     * @type {string}
     * @memberof ProjectDto
     */
    'createdBy': string;
    /**
     * User who last edited
     * @type {string}
     * @memberof ProjectDto
     */
    'updatedBy': string;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProjectDto
     */
    'createdAt': string;
    /**
     * Date of last update
     * @type {string}
     * @memberof ProjectDto
     */
    'updatedAt': string;
    /**
     * Name of the project
     * @type {string}
     * @memberof ProjectDto
     */
    'name': string;
    /**
     * Project description
     * @type {string}
     * @memberof ProjectDto
     */
    'description'?: string | null;
    /**
     * Determine if project is favorite for logged user
     * @type {boolean}
     * @memberof ProjectDto
     */
    'isFavorite': boolean;
}
/**
 * Standard class used for paginated results
 * @export
 * @interface ProjectDtoPaginatedCollection
 */
export interface ProjectDtoPaginatedCollection {
    /**
     * Data in collection
     * @type {Array<ProjectDto>}
     * @memberof ProjectDtoPaginatedCollection
     */
    'data': Array<ProjectDto>;
    /**
     * Page number of result
     * @type {number}
     * @memberof ProjectDtoPaginatedCollection
     */
    'page': number;
    /**
     * True page size
     * @type {number}
     * @memberof ProjectDtoPaginatedCollection
     */
    'pageSize': number;
    /**
     * Requested page size
     * @type {number}
     * @memberof ProjectDtoPaginatedCollection
     */
    'requestedPageSize': number;
    /**
     * Total records that exist
     * @type {number}
     * @memberof ProjectDtoPaginatedCollection
     */
    'totalRecords': number;
    /**
     * Total number of pages that exist
     * @type {number}
     * @memberof ProjectDtoPaginatedCollection
     */
    'totalPages': number;
    /**
     * Filter used by client
     * @type {string}
     * @memberof ProjectDtoPaginatedCollection
     */
    'filter': string;
    /**
     * Sort used by client
     * @type {string}
     * @memberof ProjectDtoPaginatedCollection
     */
    'sort': string;
    /**
     * Determine whether next page exists
     * @type {boolean}
     * @memberof ProjectDtoPaginatedCollection
     */
    'nextPageExists': boolean;
    /**
     * Determine whether previous page exists
     * @type {boolean}
     * @memberof ProjectDtoPaginatedCollection
     */
    'previousPageExists': boolean;
}
/**
 * Public model for marking/unmarking project as favorite
 * @export
 * @interface ProjectFavoriteMark
 */
export interface ProjectFavoriteMark {
    /**
     * Id of project to mark/unmark
     * @type {string}
     * @memberof ProjectFavoriteMark
     */
    'projectId': string;
}
/**
 * Project with all jobs loaded
 * @export
 * @interface ProjectJobsDto
 */
export interface ProjectJobsDto {
    /**
     * Entity id
     * @type {string}
     * @memberof ProjectJobsDto
     */
    'id': string;
    /**
     * Owner id
     * @type {string}
     * @memberof ProjectJobsDto
     */
    'createdBy': string;
    /**
     * User who last edited
     * @type {string}
     * @memberof ProjectJobsDto
     */
    'updatedBy': string;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProjectJobsDto
     */
    'createdAt': string;
    /**
     * Date of last update
     * @type {string}
     * @memberof ProjectJobsDto
     */
    'updatedAt': string;
    /**
     * Name of the project
     * @type {string}
     * @memberof ProjectJobsDto
     */
    'name': string;
    /**
     * Determine if project is favorite for logged user
     * @type {boolean}
     * @memberof ProjectJobsDto
     */
    'isFavorite': boolean;
    /**
     * Job collection
     * @type {Array<JobDto>}
     * @memberof ProjectJobsDto
     */
    'jobs': Array<JobDto>;
    /**
     * 
     * @type {JobResultInformationDto}
     * @memberof ProjectJobsDto
     */
    'jobInformation': JobResultInformationDto;
}
/**
 * Create new project
 * @export
 * @interface ProjectUpdateRequest
 */
export interface ProjectUpdateRequest {
    /**
     * Name of project
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    'name': string;
    /**
     * Entity id
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    'id': string;
    /**
     * Project description
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    'description'?: string | null;
}
/**
 * Request for sign in using email and password
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
    /**
     * Email
     * @type {string}
     * @memberof SignInRequest
     */
    'email'?: string | null;
    /**
     * Password
     * @type {string}
     * @memberof SignInRequest
     */
    'password'?: string | null;
}
/**
 * Response for sign in attempt
 * @export
 * @interface SignInResponse
 */
export interface SignInResponse {
    /**
     * Bearer token
     * @type {string}
     * @memberof SignInResponse
     */
    'token'?: string | null;
    /**
     * Expiration of token
     * @type {string}
     * @memberof SignInResponse
     */
    'expiration'?: string | null;
    /**
     * 
     * @type {UserDto}
     * @memberof SignInResponse
     */
    'user'?: UserDto;
    /**
     * Determine whether the request was successful
     * @type {boolean}
     * @memberof SignInResponse
     */
    'isAuthenticated': boolean;
}
/**
 * Request for uploading icon of the application
 * @export
 * @interface UploadApplicationIconRequest
 */
export interface UploadApplicationIconRequest {
    /**
     * Entity id
     * @type {string}
     * @memberof UploadApplicationIconRequest
     */
    'applicationId'?: string;
    /**
     * File format (like \'png\', \'ico\', \'jpg\'...)
     * @type {string}
     * @memberof UploadApplicationIconRequest
     */
    'suffix'?: string | null;
}
/**
 * Request for uploading attachment file
 * @export
 * @interface UploadJobAttachmentRequest
 */
export interface UploadJobAttachmentRequest {
    /**
     * Entity id
     * @type {string}
     * @memberof UploadJobAttachmentRequest
     */
    'jobId'?: string;
    /**
     * Name of file, including extension, in http encoded format
     * @type {string}
     * @memberof UploadJobAttachmentRequest
     */
    'fileName'?: string | null;
}
/**
 * Request for uploading runnable file
 * @export
 * @interface UploadJobOpenableFileRequest
 */
export interface UploadJobOpenableFileRequest {
    /**
     * Entity id
     * @type {string}
     * @memberof UploadJobOpenableFileRequest
     */
    'jobId'?: string;
}
/**
 * Request for uploading attachment file
 * @export
 * @interface UploadJobPreviewRequest
 */
export interface UploadJobPreviewRequest {
    /**
     * Entity id
     * @type {string}
     * @memberof UploadJobPreviewRequest
     */
    'jobId'?: string;
    /**
     * Name of file, including extension, in http encoded format
     * @type {string}
     * @memberof UploadJobPreviewRequest
     */
    'fileName'?: string | null;
}
/**
 * Request for uploading icon of the job
 * @export
 * @interface UploadJobTranslationIconRequest
 */
export interface UploadJobTranslationIconRequest {
    /**
     * Entity id
     * @type {string}
     * @memberof UploadJobTranslationIconRequest
     */
    'translationId'?: string;
    /**
     * File format (like \'png\', \'ico\', \'jpg\'...)
     * @type {string}
     * @memberof UploadJobTranslationIconRequest
     */
    'suffix'?: string | null;
}
/**
 * Request for uploading attachment file
 * @export
 * @interface UploadProjectAttachmentRequest
 */
export interface UploadProjectAttachmentRequest {
    /**
     * Entity id
     * @type {string}
     * @memberof UploadProjectAttachmentRequest
     */
    'projectId'?: string;
    /**
     * Name of file, including extension, in http encoded format
     * @type {string}
     * @memberof UploadProjectAttachmentRequest
     */
    'fileName'?: string | null;
}
/**
 * Model for changing password
 * @export
 * @interface UserChangePasswordRequest
 */
export interface UserChangePasswordRequest {
    /**
     * Old user password
     * @type {string}
     * @memberof UserChangePasswordRequest
     */
    'oldPassword': string;
    /**
     * New user password
     * @type {string}
     * @memberof UserChangePasswordRequest
     */
    'newPassword': string;
}
/**
 * Create new project
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     * User username
     * @type {string}
     * @memberof UserCreateRequest
     */
    'userName': string;
    /**
     * User email
     * @type {string}
     * @memberof UserCreateRequest
     */
    'email': string;
    /**
     * User phone number
     * @type {string}
     * @memberof UserCreateRequest
     */
    'phoneNumber': string;
    /**
     * User password. Must be at least 8 chars long
     * @type {string}
     * @memberof UserCreateRequest
     */
    'password': string;
    /**
     * Roles of user
     * @type {Array<string>}
     * @memberof UserCreateRequest
     */
    'userRoles': Array<string>;
}
/**
 * Entity representing user in system
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * Entity id
     * @type {string}
     * @memberof UserDto
     */
    'id': string;
    /**
     * Date of creation
     * @type {string}
     * @memberof UserDto
     */
    'createdAt': string;
    /**
     * Date of last update
     * @type {string}
     * @memberof UserDto
     */
    'updatedAt': string;
    /**
     * User username
     * @type {string}
     * @memberof UserDto
     */
    'userName': string;
    /**
     * Normalized username
     * @type {string}
     * @memberof UserDto
     */
    'normalizedUserName': string;
    /**
     * User email
     * @type {string}
     * @memberof UserDto
     */
    'email': string;
    /**
     * Normalized email
     * @type {string}
     * @memberof UserDto
     */
    'normalizedEmail': string;
    /**
     * User phone number
     * @type {string}
     * @memberof UserDto
     */
    'phoneNumber': string;
    /**
     * Indicate if user is disabled by admin
     * @type {boolean}
     * @memberof UserDto
     */
    'isDisabled': boolean;
    /**
     * User roles
     * @type {Array<string>}
     * @memberof UserDto
     */
    'userRoles': Array<string>;
}

/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsGet: async (query?: string, sort?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiApplicationsIdDelete', 'id', id)
            const localVarPath = `/fine-project-manager/api/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiApplicationsIdGet', 'id', id)
            const localVarPath = `/fine-project-manager/api/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all applications without using pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsNoPaginationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/applications/no-pagination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new entity
         * @param {ApplicationCreateRequest} [applicationCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsPost: async (applicationCreateRequest?: ApplicationCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update single entity
         * @param {ApplicationUpdateRequest} [applicationUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsPut: async (applicationUpdateRequest?: ApplicationUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get link for uploading new icon.  WARNING: This request also delete old icon, so don\'t use it if you don\'t plan to upload new icon!
         * @param {UploadApplicationIconRequest} [uploadApplicationIconRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsUploadIconPost: async (uploadApplicationIconRequest?: UploadApplicationIconRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/applications/upload-icon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadApplicationIconRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiApplicationsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDtoPaginatedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiApplicationsGet(query, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiApplicationsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiApplicationsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiApplicationsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiApplicationsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all applications without using pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiApplicationsNoPaginationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDtoPaginatedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiApplicationsNoPaginationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new entity
         * @param {ApplicationCreateRequest} [applicationCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiApplicationsPost(applicationCreateRequest?: ApplicationCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiApplicationsPost(applicationCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update single entity
         * @param {ApplicationUpdateRequest} [applicationUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiApplicationsPut(applicationUpdateRequest?: ApplicationUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiApplicationsPut(applicationUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get link for uploading new icon.  WARNING: This request also delete old icon, so don\'t use it if you don\'t plan to upload new icon!
         * @param {UploadApplicationIconRequest} [uploadApplicationIconRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiApplicationsUploadIconPost(uploadApplicationIconRequest?: UploadApplicationIconRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiApplicationsUploadIconPost(uploadApplicationIconRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationsApiFp(configuration)
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<ApplicationDtoPaginatedCollection> {
            return localVarFp.fineProjectManagerApiApplicationsGet(query, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.fineProjectManagerApiApplicationsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsIdGet(id: string, options?: any): AxiosPromise<ApplicationDto> {
            return localVarFp.fineProjectManagerApiApplicationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all applications without using pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsNoPaginationGet(options?: any): AxiosPromise<ApplicationDtoPaginatedCollection> {
            return localVarFp.fineProjectManagerApiApplicationsNoPaginationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new entity
         * @param {ApplicationCreateRequest} [applicationCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsPost(applicationCreateRequest?: ApplicationCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.fineProjectManagerApiApplicationsPost(applicationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update single entity
         * @param {ApplicationUpdateRequest} [applicationUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsPut(applicationUpdateRequest?: ApplicationUpdateRequest, options?: any): AxiosPromise<ApplicationDto> {
            return localVarFp.fineProjectManagerApiApplicationsPut(applicationUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get link for uploading new icon.  WARNING: This request also delete old icon, so don\'t use it if you don\'t plan to upload new icon!
         * @param {UploadApplicationIconRequest} [uploadApplicationIconRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiApplicationsUploadIconPost(uploadApplicationIconRequest?: UploadApplicationIconRequest, options?: any): AxiosPromise<FileOperationResponse> {
            return localVarFp.fineProjectManagerApiApplicationsUploadIconPost(uploadApplicationIconRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary List all entities in paginated collection
     * @param {string} [query] Search query
     * @param {string} [sort] Order by
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public fineProjectManagerApiApplicationsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).fineProjectManagerApiApplicationsGet(query, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete entity with given id.  Throw error if entity not exists
     * @param {string} id Entity id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public fineProjectManagerApiApplicationsIdDelete(id: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).fineProjectManagerApiApplicationsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get single entity with given id.  Throw error if entity not exists
     * @param {string} id Entity id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public fineProjectManagerApiApplicationsIdGet(id: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).fineProjectManagerApiApplicationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all applications without using pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public fineProjectManagerApiApplicationsNoPaginationGet(options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).fineProjectManagerApiApplicationsNoPaginationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new entity
     * @param {ApplicationCreateRequest} [applicationCreateRequest] New entity data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public fineProjectManagerApiApplicationsPost(applicationCreateRequest?: ApplicationCreateRequest, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).fineProjectManagerApiApplicationsPost(applicationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update single entity
     * @param {ApplicationUpdateRequest} [applicationUpdateRequest] New entity data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public fineProjectManagerApiApplicationsPut(applicationUpdateRequest?: ApplicationUpdateRequest, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).fineProjectManagerApiApplicationsPut(applicationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get link for uploading new icon.  WARNING: This request also delete old icon, so don\'t use it if you don\'t plan to upload new icon!
     * @param {UploadApplicationIconRequest} [uploadApplicationIconRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public fineProjectManagerApiApplicationsUploadIconPost(uploadApplicationIconRequest?: UploadApplicationIconRequest, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).fineProjectManagerApiApplicationsUploadIconPost(uploadApplicationIconRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobTranslationsApi - axios parameter creator
 * @export
 */
export const JobTranslationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsGet: async (query?: string, sort?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobtranslations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobtranslationsIdDelete', 'id', id)
            const localVarPath = `/fine-project-manager/api/jobtranslations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobtranslationsIdGet', 'id', id)
            const localVarPath = `/fine-project-manager/api/jobtranslations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all translations without using pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsNoPaginationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobtranslations/no-pagination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new entity
         * @param {JobTranslationCreateRequest} [jobTranslationCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsPost: async (jobTranslationCreateRequest?: JobTranslationCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobtranslations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobTranslationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update single entity
         * @param {JobTranslationUpdateRequest} [jobTranslationUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsPut: async (jobTranslationUpdateRequest?: JobTranslationUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobtranslations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobTranslationUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get link for uploading new icon.  WARNING: This request also delete old icon, so don\'t use it if you don\'t plan to upload new icon!
         * @param {UploadJobTranslationIconRequest} [uploadJobTranslationIconRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsUploadIconPost: async (uploadJobTranslationIconRequest?: UploadJobTranslationIconRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobtranslations/upload-icon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadJobTranslationIconRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobTranslationsApi - functional programming interface
 * @export
 */
export const JobTranslationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobTranslationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobtranslationsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTranslationDtoPaginatedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobtranslationsGet(query, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobtranslationsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobtranslationsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobtranslationsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTranslationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobtranslationsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all translations without using pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobtranslationsNoPaginationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTranslationDtoPaginatedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobtranslationsNoPaginationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new entity
         * @param {JobTranslationCreateRequest} [jobTranslationCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobtranslationsPost(jobTranslationCreateRequest?: JobTranslationCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobtranslationsPost(jobTranslationCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update single entity
         * @param {JobTranslationUpdateRequest} [jobTranslationUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobtranslationsPut(jobTranslationUpdateRequest?: JobTranslationUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTranslationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobtranslationsPut(jobTranslationUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get link for uploading new icon.  WARNING: This request also delete old icon, so don\'t use it if you don\'t plan to upload new icon!
         * @param {UploadJobTranslationIconRequest} [uploadJobTranslationIconRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobtranslationsUploadIconPost(uploadJobTranslationIconRequest?: UploadJobTranslationIconRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobtranslationsUploadIconPost(uploadJobTranslationIconRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobTranslationsApi - factory interface
 * @export
 */
export const JobTranslationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobTranslationsApiFp(configuration)
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<JobTranslationDtoPaginatedCollection> {
            return localVarFp.fineProjectManagerApiJobtranslationsGet(query, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.fineProjectManagerApiJobtranslationsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsIdGet(id: string, options?: any): AxiosPromise<JobTranslationDto> {
            return localVarFp.fineProjectManagerApiJobtranslationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all translations without using pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsNoPaginationGet(options?: any): AxiosPromise<JobTranslationDtoPaginatedCollection> {
            return localVarFp.fineProjectManagerApiJobtranslationsNoPaginationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new entity
         * @param {JobTranslationCreateRequest} [jobTranslationCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsPost(jobTranslationCreateRequest?: JobTranslationCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.fineProjectManagerApiJobtranslationsPost(jobTranslationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update single entity
         * @param {JobTranslationUpdateRequest} [jobTranslationUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsPut(jobTranslationUpdateRequest?: JobTranslationUpdateRequest, options?: any): AxiosPromise<JobTranslationDto> {
            return localVarFp.fineProjectManagerApiJobtranslationsPut(jobTranslationUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get link for uploading new icon.  WARNING: This request also delete old icon, so don\'t use it if you don\'t plan to upload new icon!
         * @param {UploadJobTranslationIconRequest} [uploadJobTranslationIconRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobtranslationsUploadIconPost(uploadJobTranslationIconRequest?: UploadJobTranslationIconRequest, options?: any): AxiosPromise<FileOperationResponse> {
            return localVarFp.fineProjectManagerApiJobtranslationsUploadIconPost(uploadJobTranslationIconRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobTranslationsApi - object-oriented interface
 * @export
 * @class JobTranslationsApi
 * @extends {BaseAPI}
 */
export class JobTranslationsApi extends BaseAPI {
    /**
     * 
     * @summary List all entities in paginated collection
     * @param {string} [query] Search query
     * @param {string} [sort] Order by
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTranslationsApi
     */
    public fineProjectManagerApiJobtranslationsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return JobTranslationsApiFp(this.configuration).fineProjectManagerApiJobtranslationsGet(query, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete entity with given id.  Throw error if entity not exists
     * @param {string} id Entity id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTranslationsApi
     */
    public fineProjectManagerApiJobtranslationsIdDelete(id: string, options?: AxiosRequestConfig) {
        return JobTranslationsApiFp(this.configuration).fineProjectManagerApiJobtranslationsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get single entity with given id.  Throw error if entity not exists
     * @param {string} id Entity id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTranslationsApi
     */
    public fineProjectManagerApiJobtranslationsIdGet(id: string, options?: AxiosRequestConfig) {
        return JobTranslationsApiFp(this.configuration).fineProjectManagerApiJobtranslationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all translations without using pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTranslationsApi
     */
    public fineProjectManagerApiJobtranslationsNoPaginationGet(options?: AxiosRequestConfig) {
        return JobTranslationsApiFp(this.configuration).fineProjectManagerApiJobtranslationsNoPaginationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new entity
     * @param {JobTranslationCreateRequest} [jobTranslationCreateRequest] New entity data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTranslationsApi
     */
    public fineProjectManagerApiJobtranslationsPost(jobTranslationCreateRequest?: JobTranslationCreateRequest, options?: AxiosRequestConfig) {
        return JobTranslationsApiFp(this.configuration).fineProjectManagerApiJobtranslationsPost(jobTranslationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update single entity
     * @param {JobTranslationUpdateRequest} [jobTranslationUpdateRequest] New entity data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTranslationsApi
     */
    public fineProjectManagerApiJobtranslationsPut(jobTranslationUpdateRequest?: JobTranslationUpdateRequest, options?: AxiosRequestConfig) {
        return JobTranslationsApiFp(this.configuration).fineProjectManagerApiJobtranslationsPut(jobTranslationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get link for uploading new icon.  WARNING: This request also delete old icon, so don\'t use it if you don\'t plan to upload new icon!
     * @param {UploadJobTranslationIconRequest} [uploadJobTranslationIconRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTranslationsApi
     */
    public fineProjectManagerApiJobtranslationsUploadIconPost(uploadJobTranslationIconRequest?: UploadJobTranslationIconRequest, options?: AxiosRequestConfig) {
        return JobTranslationsApiFp(this.configuration).fineProjectManagerApiJobtranslationsUploadIconPost(uploadJobTranslationIconRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsGet: async (query?: string, sort?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get links for all attachments saved under job
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdAttachmentsGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdAttachmentsGet', 'id', id)
            const localVarPath = `/fine-project-manager/api/jobs/{id}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete specific attachment file under job
         * @param {string} id 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdAttachmentsKeyDelete: async (id: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdAttachmentsKeyDelete', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdAttachmentsKeyDelete', 'key', key)
            const localVarPath = `/fine-project-manager/api/jobs/{id}/attachments/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdDelete', 'id', id)
            const localVarPath = `/fine-project-manager/api/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdGet', 'id', id)
            const localVarPath = `/fine-project-manager/api/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete job openable file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdOpenableFileDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdOpenableFileDelete', 'id', id)
            const localVarPath = `/fine-project-manager/api/jobs/{id}/openable-file`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get link for job openable file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdOpenableFileGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdOpenableFileGet', 'id', id)
            const localVarPath = `/fine-project-manager/api/jobs/{id}/openable-file`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get links for all previews saved under job
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdPreviewsGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdPreviewsGet', 'id', id)
            const localVarPath = `/fine-project-manager/api/jobs/{id}/previews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete specific preview file under job
         * @param {string} id 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdPreviewsKeyDelete: async (id: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdPreviewsKeyDelete', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('fineProjectManagerApiJobsIdPreviewsKeyDelete', 'key', key)
            const localVarPath = `/fine-project-manager/api/jobs/{id}/previews/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new entity
         * @param {JobCreateRequest} [jobCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsPost: async (jobCreateRequest?: JobCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update single entity
         * @param {JobUpdateRequest} [jobUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsPut: async (jobUpdateRequest?: JobUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get link for uploading new attachment
         * @param {UploadJobAttachmentRequest} [uploadJobAttachmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsUploadAttachmentPost: async (uploadJobAttachmentRequest?: UploadJobAttachmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobs/upload-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadJobAttachmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get link for uploading openable file
         * @param {UploadJobOpenableFileRequest} [uploadJobOpenableFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsUploadOpenableFilePost: async (uploadJobOpenableFileRequest?: UploadJobOpenableFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobs/upload-openable-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadJobOpenableFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get link for uploading new preview
         * @param {UploadJobPreviewRequest} [uploadJobPreviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsUploadPreviewPost: async (uploadJobPreviewRequest?: UploadJobPreviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/jobs/upload-preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadJobPreviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobDtoPaginatedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsGet(query, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get links for all attachments saved under job
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsIdAttachmentsGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsIdAttachmentsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete specific attachment file under job
         * @param {string} id 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsIdAttachmentsKeyDelete(id: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsIdAttachmentsKeyDelete(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete job openable file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsIdOpenableFileDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsIdOpenableFileDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get link for job openable file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsIdOpenableFileGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsIdOpenableFileGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get links for all previews saved under job
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsIdPreviewsGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsIdPreviewsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete specific preview file under job
         * @param {string} id 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsIdPreviewsKeyDelete(id: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsIdPreviewsKeyDelete(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new entity
         * @param {JobCreateRequest} [jobCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsPost(jobCreateRequest?: JobCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsPost(jobCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update single entity
         * @param {JobUpdateRequest} [jobUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsPut(jobUpdateRequest?: JobUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsPut(jobUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get link for uploading new attachment
         * @param {UploadJobAttachmentRequest} [uploadJobAttachmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsUploadAttachmentPost(uploadJobAttachmentRequest?: UploadJobAttachmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsUploadAttachmentPost(uploadJobAttachmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get link for uploading openable file
         * @param {UploadJobOpenableFileRequest} [uploadJobOpenableFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsUploadOpenableFilePost(uploadJobOpenableFileRequest?: UploadJobOpenableFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsUploadOpenableFilePost(uploadJobOpenableFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get link for uploading new preview
         * @param {UploadJobPreviewRequest} [uploadJobPreviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiJobsUploadPreviewPost(uploadJobPreviewRequest?: UploadJobPreviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiJobsUploadPreviewPost(uploadJobPreviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<JobDtoPaginatedCollection> {
            return localVarFp.fineProjectManagerApiJobsGet(query, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get links for all attachments saved under job
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdAttachmentsGet(id: string, options?: any): AxiosPromise<FileLinksResponse> {
            return localVarFp.fineProjectManagerApiJobsIdAttachmentsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete specific attachment file under job
         * @param {string} id 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdAttachmentsKeyDelete(id: string, key: string, options?: any): AxiosPromise<FileLinksResponse> {
            return localVarFp.fineProjectManagerApiJobsIdAttachmentsKeyDelete(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.fineProjectManagerApiJobsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdGet(id: string, options?: any): AxiosPromise<JobDto> {
            return localVarFp.fineProjectManagerApiJobsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete job openable file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdOpenableFileDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.fineProjectManagerApiJobsIdOpenableFileDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get link for job openable file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdOpenableFileGet(id: string, options?: any): AxiosPromise<FileOperationResponse> {
            return localVarFp.fineProjectManagerApiJobsIdOpenableFileGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get links for all previews saved under job
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdPreviewsGet(id: string, options?: any): AxiosPromise<FileLinksResponse> {
            return localVarFp.fineProjectManagerApiJobsIdPreviewsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete specific preview file under job
         * @param {string} id 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsIdPreviewsKeyDelete(id: string, key: string, options?: any): AxiosPromise<FileLinksResponse> {
            return localVarFp.fineProjectManagerApiJobsIdPreviewsKeyDelete(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new entity
         * @param {JobCreateRequest} [jobCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsPost(jobCreateRequest?: JobCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.fineProjectManagerApiJobsPost(jobCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update single entity
         * @param {JobUpdateRequest} [jobUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsPut(jobUpdateRequest?: JobUpdateRequest, options?: any): AxiosPromise<JobDto> {
            return localVarFp.fineProjectManagerApiJobsPut(jobUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get link for uploading new attachment
         * @param {UploadJobAttachmentRequest} [uploadJobAttachmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsUploadAttachmentPost(uploadJobAttachmentRequest?: UploadJobAttachmentRequest, options?: any): AxiosPromise<FileOperationResponse> {
            return localVarFp.fineProjectManagerApiJobsUploadAttachmentPost(uploadJobAttachmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get link for uploading openable file
         * @param {UploadJobOpenableFileRequest} [uploadJobOpenableFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsUploadOpenableFilePost(uploadJobOpenableFileRequest?: UploadJobOpenableFileRequest, options?: any): AxiosPromise<FileOperationResponse> {
            return localVarFp.fineProjectManagerApiJobsUploadOpenableFilePost(uploadJobOpenableFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get link for uploading new preview
         * @param {UploadJobPreviewRequest} [uploadJobPreviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiJobsUploadPreviewPost(uploadJobPreviewRequest?: UploadJobPreviewRequest, options?: any): AxiosPromise<FileOperationResponse> {
            return localVarFp.fineProjectManagerApiJobsUploadPreviewPost(uploadJobPreviewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @summary List all entities in paginated collection
     * @param {string} [query] Search query
     * @param {string} [sort] Order by
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsGet(query, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get links for all attachments saved under job
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsIdAttachmentsGet(id: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsIdAttachmentsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete specific attachment file under job
     * @param {string} id 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsIdAttachmentsKeyDelete(id: string, key: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsIdAttachmentsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete entity with given id.  Throw error if entity not exists
     * @param {string} id Entity id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsIdDelete(id: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get single entity with given id.  Throw error if entity not exists
     * @param {string} id Entity id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsIdGet(id: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete job openable file
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsIdOpenableFileDelete(id: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsIdOpenableFileDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get link for job openable file
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsIdOpenableFileGet(id: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsIdOpenableFileGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get links for all previews saved under job
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsIdPreviewsGet(id: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsIdPreviewsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete specific preview file under job
     * @param {string} id 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsIdPreviewsKeyDelete(id: string, key: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsIdPreviewsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new entity
     * @param {JobCreateRequest} [jobCreateRequest] New entity data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsPost(jobCreateRequest?: JobCreateRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsPost(jobCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update single entity
     * @param {JobUpdateRequest} [jobUpdateRequest] New entity data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsPut(jobUpdateRequest?: JobUpdateRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsPut(jobUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get link for uploading new attachment
     * @param {UploadJobAttachmentRequest} [uploadJobAttachmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsUploadAttachmentPost(uploadJobAttachmentRequest?: UploadJobAttachmentRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsUploadAttachmentPost(uploadJobAttachmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get link for uploading openable file
     * @param {UploadJobOpenableFileRequest} [uploadJobOpenableFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsUploadOpenableFilePost(uploadJobOpenableFileRequest?: UploadJobOpenableFileRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsUploadOpenableFilePost(uploadJobOpenableFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get link for uploading new preview
     * @param {UploadJobPreviewRequest} [uploadJobPreviewRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public fineProjectManagerApiJobsUploadPreviewPost(uploadJobPreviewRequest?: UploadJobPreviewRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).fineProjectManagerApiJobsUploadPreviewPost(uploadJobPreviewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsGet: async (query?: string, sort?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get links for all attachments saved under project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdAttachmentsGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiProjectsIdAttachmentsGet', 'id', id)
            const localVarPath = `/fine-project-manager/api/projects/{id}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete specific attachment file under project
         * @param {string} id 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdAttachmentsKeyDelete: async (id: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiProjectsIdAttachmentsKeyDelete', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('fineProjectManagerApiProjectsIdAttachmentsKeyDelete', 'key', key)
            const localVarPath = `/fine-project-manager/api/projects/{id}/attachments/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiProjectsIdDelete', 'id', id)
            const localVarPath = `/fine-project-manager/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiProjectsIdGet', 'id', id)
            const localVarPath = `/fine-project-manager/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load all jobs under selected project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdJobsGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fineProjectManagerApiProjectsIdJobsGet', 'id', id)
            const localVarPath = `/fine-project-manager/api/projects/{id}/jobs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark as favorite. Expect optimistic UI, so it doesn\'t return any error with exception of bad id
         * @param {ProjectFavoriteMark} [projectFavoriteMark] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsMarkFavoritePost: async (projectFavoriteMark?: ProjectFavoriteMark, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/projects/mark-favorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectFavoriteMark, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new entity
         * @param {ProjectCreateRequest} [projectCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsPost: async (projectCreateRequest?: ProjectCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update single entity
         * @param {ProjectUpdateRequest} [projectUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsPut: async (projectUpdateRequest?: ProjectUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unmark as favorite. Expect optimistic UI, so it doesn\'t return any error with exception of bad id
         * @param {ProjectFavoriteMark} [projectFavoriteMark] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsUnmarkFavoritePost: async (projectFavoriteMark?: ProjectFavoriteMark, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/projects/unmark-favorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectFavoriteMark, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get link for uploading new attachment
         * @param {UploadProjectAttachmentRequest} [uploadProjectAttachmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsUploadAttachmentPost: async (uploadProjectAttachmentRequest?: UploadProjectAttachmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/projects/upload-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadProjectAttachmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDtoPaginatedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsGet(query, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get links for all attachments saved under project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsIdAttachmentsGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsIdAttachmentsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete specific attachment file under project
         * @param {string} id 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsIdAttachmentsKeyDelete(id: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsIdAttachmentsKeyDelete(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load all jobs under selected project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsIdJobsGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectJobsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsIdJobsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mark as favorite. Expect optimistic UI, so it doesn\'t return any error with exception of bad id
         * @param {ProjectFavoriteMark} [projectFavoriteMark] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsMarkFavoritePost(projectFavoriteMark?: ProjectFavoriteMark, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsMarkFavoritePost(projectFavoriteMark, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new entity
         * @param {ProjectCreateRequest} [projectCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsPost(projectCreateRequest?: ProjectCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsPost(projectCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update single entity
         * @param {ProjectUpdateRequest} [projectUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsPut(projectUpdateRequest?: ProjectUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsPut(projectUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unmark as favorite. Expect optimistic UI, so it doesn\'t return any error with exception of bad id
         * @param {ProjectFavoriteMark} [projectFavoriteMark] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsUnmarkFavoritePost(projectFavoriteMark?: ProjectFavoriteMark, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsUnmarkFavoritePost(projectFavoriteMark, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get link for uploading new attachment
         * @param {UploadProjectAttachmentRequest} [uploadProjectAttachmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiProjectsUploadAttachmentPost(uploadProjectAttachmentRequest?: UploadProjectAttachmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiProjectsUploadAttachmentPost(uploadProjectAttachmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary List all entities in paginated collection
         * @param {string} [query] Search query
         * @param {string} [sort] Order by
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<ProjectDtoPaginatedCollection> {
            return localVarFp.fineProjectManagerApiProjectsGet(query, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get links for all attachments saved under project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdAttachmentsGet(id: string, options?: any): AxiosPromise<FileLinksResponse> {
            return localVarFp.fineProjectManagerApiProjectsIdAttachmentsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete specific attachment file under project
         * @param {string} id 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdAttachmentsKeyDelete(id: string, key: string, options?: any): AxiosPromise<FileLinksResponse> {
            return localVarFp.fineProjectManagerApiProjectsIdAttachmentsKeyDelete(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.fineProjectManagerApiProjectsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get single entity with given id.  Throw error if entity not exists
         * @param {string} id Entity id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdGet(id: string, options?: any): AxiosPromise<ProjectDto> {
            return localVarFp.fineProjectManagerApiProjectsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load all jobs under selected project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsIdJobsGet(id: string, options?: any): AxiosPromise<ProjectJobsDto> {
            return localVarFp.fineProjectManagerApiProjectsIdJobsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark as favorite. Expect optimistic UI, so it doesn\'t return any error with exception of bad id
         * @param {ProjectFavoriteMark} [projectFavoriteMark] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsMarkFavoritePost(projectFavoriteMark?: ProjectFavoriteMark, options?: any): AxiosPromise<FileLinksResponse> {
            return localVarFp.fineProjectManagerApiProjectsMarkFavoritePost(projectFavoriteMark, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new entity
         * @param {ProjectCreateRequest} [projectCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsPost(projectCreateRequest?: ProjectCreateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.fineProjectManagerApiProjectsPost(projectCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update single entity
         * @param {ProjectUpdateRequest} [projectUpdateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsPut(projectUpdateRequest?: ProjectUpdateRequest, options?: any): AxiosPromise<ProjectDto> {
            return localVarFp.fineProjectManagerApiProjectsPut(projectUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unmark as favorite. Expect optimistic UI, so it doesn\'t return any error with exception of bad id
         * @param {ProjectFavoriteMark} [projectFavoriteMark] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsUnmarkFavoritePost(projectFavoriteMark?: ProjectFavoriteMark, options?: any): AxiosPromise<FileLinksResponse> {
            return localVarFp.fineProjectManagerApiProjectsUnmarkFavoritePost(projectFavoriteMark, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get link for uploading new attachment
         * @param {UploadProjectAttachmentRequest} [uploadProjectAttachmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiProjectsUploadAttachmentPost(uploadProjectAttachmentRequest?: UploadProjectAttachmentRequest, options?: any): AxiosPromise<FileOperationResponse> {
            return localVarFp.fineProjectManagerApiProjectsUploadAttachmentPost(uploadProjectAttachmentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @summary List all entities in paginated collection
     * @param {string} [query] Search query
     * @param {string} [sort] Order by
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsGet(query?: string, sort?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsGet(query, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get links for all attachments saved under project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsIdAttachmentsGet(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsIdAttachmentsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete specific attachment file under project
     * @param {string} id 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsIdAttachmentsKeyDelete(id: string, key: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsIdAttachmentsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete entity with given id.  Throw error if entity not exists
     * @param {string} id Entity id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsIdDelete(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get single entity with given id.  Throw error if entity not exists
     * @param {string} id Entity id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsIdGet(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load all jobs under selected project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsIdJobsGet(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsIdJobsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark as favorite. Expect optimistic UI, so it doesn\'t return any error with exception of bad id
     * @param {ProjectFavoriteMark} [projectFavoriteMark] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsMarkFavoritePost(projectFavoriteMark?: ProjectFavoriteMark, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsMarkFavoritePost(projectFavoriteMark, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new entity
     * @param {ProjectCreateRequest} [projectCreateRequest] New entity data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsPost(projectCreateRequest?: ProjectCreateRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsPost(projectCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update single entity
     * @param {ProjectUpdateRequest} [projectUpdateRequest] New entity data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsPut(projectUpdateRequest?: ProjectUpdateRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsPut(projectUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unmark as favorite. Expect optimistic UI, so it doesn\'t return any error with exception of bad id
     * @param {ProjectFavoriteMark} [projectFavoriteMark] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsUnmarkFavoritePost(projectFavoriteMark?: ProjectFavoriteMark, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsUnmarkFavoritePost(projectFavoriteMark, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get link for uploading new attachment
     * @param {UploadProjectAttachmentRequest} [uploadProjectAttachmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public fineProjectManagerApiProjectsUploadAttachmentPost(uploadProjectAttachmentRequest?: UploadProjectAttachmentRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).fineProjectManagerApiProjectsUploadAttachmentPost(uploadProjectAttachmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary This request allows admin to create new user
         * @param {UserCreateRequest} [userCreateRequest] Create user request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersAdminCreatePost: async (userCreateRequest?: UserCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users/admin-create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This request allows admin to set password of other user
         * @param {AdminChangePasswordRequest} [adminChangePasswordRequest] Change password request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersAdminSetPasswordPut: async (adminChangePasswordRequest?: AdminChangePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users/admin-set-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminChangePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This request allows admin to edit other user
         * @param {AdminEditUserRequest} [adminEditUserRequest] Edit request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersAdminUserEditPut: async (adminEditUserRequest?: AdminEditUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users/admin-user-edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminEditUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Admin create. This request can be called only if no admin exists.
         * @param {UserCreateRequest} [userCreateRequest] Get login token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersCreateAdminPost: async (userCreateRequest?: UserCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users/create-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user with given email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersEmailGet: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('fineProjectManagerApiUsersEmailGet', 'email', email)
            const localVarPath = `/fine-project-manager/api/users/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all users without pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change password of logged user
         * @param {UserChangePasswordRequest} [userChangePasswordRequest] Change password request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersPasswordPut: async (userChangePasswordRequest?: UserChangePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userChangePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Allow admin to efficiently remove user.  Disable user so they cannot log in (delete equivalent, but without data loss)
         * @param {DisableUserRequest} [disableUserRequest] User to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersPost: async (disableUserRequest?: DisableUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(disableUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit currently logged user
         * @param {EditUserRequest} [editUserRequest] User to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersPut: async (editUserRequest?: EditUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new user
         * @param {UserCreateRequest} [userCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersRegisterPost: async (userCreateRequest?: UserCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {SignInRequest} [signInRequest] Get login token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersSignInPost: async (signInRequest?: SignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fine-project-manager/api/users/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary This request allows admin to create new user
         * @param {UserCreateRequest} [userCreateRequest] Create user request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersAdminCreatePost(userCreateRequest?: UserCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersAdminCreatePost(userCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This request allows admin to set password of other user
         * @param {AdminChangePasswordRequest} [adminChangePasswordRequest] Change password request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersAdminSetPasswordPut(adminChangePasswordRequest?: AdminChangePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersAdminSetPasswordPut(adminChangePasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This request allows admin to edit other user
         * @param {AdminEditUserRequest} [adminEditUserRequest] Edit request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersAdminUserEditPut(adminEditUserRequest?: AdminEditUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersAdminUserEditPut(adminEditUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Admin create. This request can be called only if no admin exists.
         * @param {UserCreateRequest} [userCreateRequest] Get login token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersCreateAdminPost(userCreateRequest?: UserCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersCreateAdminPost(userCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user with given email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersEmailGet(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersEmailGet(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all users without pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change password of logged user
         * @param {UserChangePasswordRequest} [userChangePasswordRequest] Change password request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersPasswordPut(userChangePasswordRequest?: UserChangePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersPasswordPut(userChangePasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Allow admin to efficiently remove user.  Disable user so they cannot log in (delete equivalent, but without data loss)
         * @param {DisableUserRequest} [disableUserRequest] User to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersPost(disableUserRequest?: DisableUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersPost(disableUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit currently logged user
         * @param {EditUserRequest} [editUserRequest] User to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersPut(editUserRequest?: EditUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersPut(editUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register new user
         * @param {UserCreateRequest} [userCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersRegisterPost(userCreateRequest?: UserCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersRegisterPost(userCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {SignInRequest} [signInRequest] Get login token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fineProjectManagerApiUsersSignInPost(signInRequest?: SignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fineProjectManagerApiUsersSignInPost(signInRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary This request allows admin to create new user
         * @param {UserCreateRequest} [userCreateRequest] Create user request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersAdminCreatePost(userCreateRequest?: UserCreateRequest, options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersAdminCreatePost(userCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This request allows admin to set password of other user
         * @param {AdminChangePasswordRequest} [adminChangePasswordRequest] Change password request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersAdminSetPasswordPut(adminChangePasswordRequest?: AdminChangePasswordRequest, options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersAdminSetPasswordPut(adminChangePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This request allows admin to edit other user
         * @param {AdminEditUserRequest} [adminEditUserRequest] Edit request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersAdminUserEditPut(adminEditUserRequest?: AdminEditUserRequest, options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersAdminUserEditPut(adminEditUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Admin create. This request can be called only if no admin exists.
         * @param {UserCreateRequest} [userCreateRequest] Get login token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersCreateAdminPost(userCreateRequest?: UserCreateRequest, options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersCreateAdminPost(userCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user with given email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersEmailGet(email: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all users without pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersGet(options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change password of logged user
         * @param {UserChangePasswordRequest} [userChangePasswordRequest] Change password request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersPasswordPut(userChangePasswordRequest?: UserChangePasswordRequest, options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersPasswordPut(userChangePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Allow admin to efficiently remove user.  Disable user so they cannot log in (delete equivalent, but without data loss)
         * @param {DisableUserRequest} [disableUserRequest] User to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersPost(disableUserRequest?: DisableUserRequest, options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersPost(disableUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit currently logged user
         * @param {EditUserRequest} [editUserRequest] User to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersPut(editUserRequest?: EditUserRequest, options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersPut(editUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register new user
         * @param {UserCreateRequest} [userCreateRequest] New entity data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersRegisterPost(userCreateRequest?: UserCreateRequest, options?: any): AxiosPromise<UserDto> {
            return localVarFp.fineProjectManagerApiUsersRegisterPost(userCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {SignInRequest} [signInRequest] Get login token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineProjectManagerApiUsersSignInPost(signInRequest?: SignInRequest, options?: any): AxiosPromise<SignInResponse> {
            return localVarFp.fineProjectManagerApiUsersSignInPost(signInRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary This request allows admin to create new user
     * @param {UserCreateRequest} [userCreateRequest] Create user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersAdminCreatePost(userCreateRequest?: UserCreateRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersAdminCreatePost(userCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This request allows admin to set password of other user
     * @param {AdminChangePasswordRequest} [adminChangePasswordRequest] Change password request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersAdminSetPasswordPut(adminChangePasswordRequest?: AdminChangePasswordRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersAdminSetPasswordPut(adminChangePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This request allows admin to edit other user
     * @param {AdminEditUserRequest} [adminEditUserRequest] Edit request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersAdminUserEditPut(adminEditUserRequest?: AdminEditUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersAdminUserEditPut(adminEditUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Admin create. This request can be called only if no admin exists.
     * @param {UserCreateRequest} [userCreateRequest] Get login token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersCreateAdminPost(userCreateRequest?: UserCreateRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersCreateAdminPost(userCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user with given email
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersEmailGet(email: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all users without pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change password of logged user
     * @param {UserChangePasswordRequest} [userChangePasswordRequest] Change password request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersPasswordPut(userChangePasswordRequest?: UserChangePasswordRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersPasswordPut(userChangePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Allow admin to efficiently remove user.  Disable user so they cannot log in (delete equivalent, but without data loss)
     * @param {DisableUserRequest} [disableUserRequest] User to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersPost(disableUserRequest?: DisableUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersPost(disableUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit currently logged user
     * @param {EditUserRequest} [editUserRequest] User to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersPut(editUserRequest?: EditUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersPut(editUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register new user
     * @param {UserCreateRequest} [userCreateRequest] New entity data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersRegisterPost(userCreateRequest?: UserCreateRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersRegisterPost(userCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {SignInRequest} [signInRequest] Get login token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public fineProjectManagerApiUsersSignInPost(signInRequest?: SignInRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).fineProjectManagerApiUsersSignInPost(signInRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


